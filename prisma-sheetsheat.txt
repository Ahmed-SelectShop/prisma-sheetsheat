Prisma SheetSheat: https://github.com/emanuelefavero/prisma

1. Installing Prisma and its needed packages:
$ npm init -y 
$ npm i --save-dev prisma @prisma/client typescript ts-node @types/node nodemon
$ npx tsc --init
tsconfig.json: {
    "compilerOptions": {
      "skipLibCheck": true,
      "strict": true,
      "rootDir": "src",
      "noEmit": true
    },
    "include": ["src/**/*"]
}
$ npx prisma init --datasource-provider mysql/postgresql

2. Setting up Prisma schema: Prisma schema is a file that defines the structure of your database, its on prisma/schema.prisma and contain this data: 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int   @id @default(autoincrement())
  name     String
}

3. Crate your database manualy withing the same name of what you have provide in your .env. 
4. Creating a new migration: $ npx prisma migrate dev --name development-migration
5. Install prisma client witch is allow you to intract with your database: npm i @prisma/client and also install  npx prisma generate

## Prisma Queries:-
1. Creating a new user: prisma client.queryRaw`INSERT INTO users (name) VALUES ('John Doe')`
2. Getting all users: prisma client.queryRaw`SELECT * FROM users
3. Getting a user by id: prisma client.queryRaw`SELECT * FROM users WHERE id
4. Updating a user: prisma client.queryRaw`UPDATE users SET name = 'Jane Doe
5. Deleting a user: prisma client.queryRaw`DELETE FROM users WHERE id

## Prisma Client:-
1. Creating a new user: const user = await prisma.user.create({ data: { name : 'John Doe' } }) 
2. Getting all users: const users = await prisma.user.findMany()
3. Getting a user by id: const user = await prisma.user.findUnique({ where:  { id: 1 } })
4. Updating a user: const user = await prisma.user.update({ where: { id:  1 }, data: { name: 'Jane Doe' } })
5. Deleting a user: const user = await prisma.user.delete({ where: { id:  1 } })

## Prisma Client with Relations:-
1. Creating a new user with a relation: const user = await prisma.user.create({ data:  { name: 'John Doe', posts: { create: { title: 'Hello World' }  } } })
2. Getting a user with its relations: const user = await prisma.user.findUnique({ where : { id: 1 }, include: { posts: true } })
3. Updating a user with its relations: const user = await prisma.user.update({ where:  { id: 1 }, data: { name: 'Jane Doe', posts: { update:  { where: { id: 1 }, data: { title: 'Hello World' } }  } } })
4. Deleting a user with its relations: const user = await prisma.user.delete({ where:  { id: 1 }, include: { posts: true } }) and  also you can use prisma client.queryRaw to delete the relation manually. 

// ----------------------------------------------------------------

#### CRUD Operations: 

// * CREATE
const createUser = await prisma.user.create({
  data: {
    name: 'Pam',
    email: 'pam@paper.com',
    age: 26,

    // * Create a userPreference object at the same time. (relation)
    userPreference: {
      create: {
        emailUpdates: true,
      },
    },
  },

  // * Include the userPreference object in the response
  // include: {
  //   userPreference: true,
  // },

  // * Only show the name and the id of userPreference in the response
  select: {
    name: true,
    userPreference: { select: { id: true } },
  },
})

const createUsers = await prisma.user.createMany({
  data: [
    {
      name: 'Michael',
      email: 'michael@paper.com',
      age: 41,
    },
    {
      name: 'Dwight',
      email: 'dwight@paper.com',
      age: 35,
    },
  ],

  // ? You can't use include or select with createMany
})

// --------------------------------------------------------------

UPDATE

// * UPDATE
// Update One
const updateOne = await prisma.user.update({
  where: {
    email: 'michael@paper.com',
  },

  data: {
    age: {
      increment: 1, // ? increment, decrement, multiply, divide, append, prepend, delete, remove, disconnect, connect, set
    },
  },
})

// Update Many
const updateMany = await prisma.user.updateMany({
  where: {
    age: { gt: 40 },
  },

  data: {
    email: '...@paper.com',
  },
})

// --------------------------------------------------------------

CONNECT, DISCONNECT, SET

// * CONNECT, DISCONNECT, SET
const connect = await prisma.user.update({
  where: {
    email: 'pam@paper.com',
  },

  data: {
    userPreference: {
      connect: {
        id: '9c7c2634-5cab-428d-8ca8-0db26bc3c684', // ? userPreferenceId from pam
      },
    },
  },
})

const disconnect = await prisma.user.update({
  where: {
    email: 'pam@paper.com',
  },

  data: {
    userPreference: {
      disconnect: true, // ? now pam's userPreference is null
    },
  },
})

// --------------------------------------------------------------

DELETE

// * DELETE
// * delete all
const deleteAll = await prisma.user.deleteMany()

// * delete many that match a condition
const deleteAllUsersAged40Plus = await prisma.user.deleteMany({
  where: {
    age: { gt: 40 },
  },
})

// * delete one
// You need a unique identifier to delete one (you can setup a unique identifier in the schema.prisma file by adding @unique to the field)
const deleteOne = await prisma.user.delete({
  where: {
    email: 'pam@paper.com',
  },
})

// --------------------------------------------------------------

READ

// * READ
// * find all users
const findUsers = await prisma.user.findMany()

// * find one user by an unique field (email)
const findUser = await prisma.user.findUnique({
  where: {
    email: 'pam@paper.com',
  },
})

// * find user by multiple unique fields that we specified
// ? @@unique([age, name])
const findUserByMultipleUniqueFields = await prisma.user.findUnique({
  where: {
    age_name: {
      age: 26,
      name: 'Pam',
    },
  },
})

// * find users, sort and limit results
const findSortAndLimitResults = await prisma.user.findMany({
  take: 2, // limit
  skip: 1, // skip
  orderBy: {
    age: 'desc', // sort
  },
})

// ? findFirst - find a user by any field that is not unique
// ? distinct - return only distinct results (only first occurence of each result with a particular field)


// --------------------------------------------------------------

// * FILTERS
// * not
const notFilter = await prisma.user.findMany({
  where: {
    name: { not: 'Pam' },
  },
})

// * in, notIn
const inFilter = await prisma.user.findMany({
  where: {
    name: { in: ['Pam', 'Dwight'] },
  },
})

// * lt, lte, gt, gte
const ltFilter = await prisma.user.findMany({
  where: {
    age: { lt: 30 },
  },
})

// * contains, startsWith, endsWith
const containsFilter = await prisma.user.findMany({
  where: {
    name: { contains: 'a' },
  },
})

// * AND, OR, NOT
const andFilter = await prisma.user.findMany({
  where: {
    AND: [{ name: 'Pam' }, { age: { lt: 30 } }],
  },
})

// ARRAY FILTERING
// * some, none, every
// ! hypothetical example
// const someFilter = await prisma.user.findMany({
//   where: {
//     posts: {
//       some: {
//         title: 'Hello World',
//       },
//     },
//   },
// })

// --------------------------------------------------------------
// --------------------------------------------------------------